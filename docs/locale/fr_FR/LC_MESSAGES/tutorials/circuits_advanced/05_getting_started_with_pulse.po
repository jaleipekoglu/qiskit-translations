msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-01-08 18:32\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/05_getting_started_with_pulse.po\n"
"X-Crowdin-File-ID: 9362\n"
"Language: fr_FR\n"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/pulse/1_getting_started_with_pulse.ipynb`__."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/05_getting_started_with_pulse.ipynb>`_."
msgstr "Exécuter en mode interactif dans le `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/05_getting_started_with_pulse.ipynb>`_."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:9
msgid "Getting Started with OpenPulse"
msgstr "Démarrer avec OpenPulse"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:11
msgid "Qiskit Pulse programs give you more control than ``QuantumCircuit``. At this level, you can specify the exact time dynamics of the input signals across all input channels. Most quantum algorithm can be described with circuits alone using gate operations – typically, it’s when you want to apply error mitigation techniques or characterize a time-dependent quality of a quantum system that pulse-level control becomes useful."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:13
msgid "On this page, we will discover how to build and execute a very basic Pulse program, which is called a schedule."
msgstr "Sur cette page, nous allons découvrir comment construire et exécuter un programme Pulse très basique, qui est appelé un ``schedule`` (horaire d'exécution)."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:16
msgid "Initialize"
msgstr "Initialiser"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:18
msgid "We import the ``Schedule`` class from the ``qiskit.pulse`` module. To start, we are going to initialize a ``Schedule`` with the name ``\"getting_started\"``."
msgstr "Nous importons la classe ` ` Schedule ` ` à partir du module ` `qiskit.pulse ` `. Pour commencer, nous allons initialiser un ` ` Schedule` ` avec le nom ` ` getting_started'` `."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:40
msgid "Easy! We have an empty schedule now."
msgstr "Facile ! Nous avons maintenant un horaire (``schedule``) vide."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:43
msgid "Build instructions"
msgstr "Instructions de construction"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:45
msgid "The next thing we will want to do is create some instructions to add to our schedule."
msgstr "Ensuite nous voulons créer quelques instructions à ajouter à notre horaire (´´schedule´´)."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:47
msgid "Perhaps the most central instruction for building schedules is the ``Waveform``. It is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. For now, let’s focus on how to build the instruction."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:79
msgid "There are multiple ways to build pulses, which you can learn about on later pages. This time, we’ve simply passed the exact amplitudes of the pulse envelope we want to play as an array. The array above is a Gaussian function evaluated at 64 points, with an amplitude of 1 and a standard deviation of 8. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency. Think of this like an arbitrary waveform generator (AWG), playing the samples you give to the ``Waveform``, mixed with a continuous sine wave generator outputting a tone at the qubit frequency."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:82
msgid "The values above happen to be real, but they can also be complex. The amplitude norm of any pulse signal is arbitrarily limited to 1. Each backend system may also impose further constraints – for instance, a minimum pulse size of 64. Learn more about getting information from the backend `here <09_gathering_system_information.ipynb>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:85
msgid "Schedule instructions"
msgstr "Ordonnancer des instructions"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:87
msgid "Next, we have to add an instruction to execute the pulse signal we just built. This means specifying not only the *time* that the pulse should be played, but also *where* it should be played. When we build circuits, we specify which qubit a gate operation should be applied to. In Pulse, every qubit has multiple *channels*."
msgstr "Ensuite, nous devons ajouter une instruction pour exécuter le signal de pulse que nous venons de construire. Cela signifie que vous devez spécifier non seulement le *moment de temps* que le pulse doit être effectué, mais aussi * où * il doit être executé. Lorsque nous construisons des circuits, nous spécifions à quel moment une opération de porte doit être appliquée. Dans Pulse, chaque qubit a plusieurs *canaux * (´´channels´´)."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:89
msgid "We will *play* our pulse on the *drive* channel of qubit 0. The drive channel lets us enact single qubit operations."
msgstr "Nous allons * jouer * ou exécuter notre impulsion sur le canal * drive * du qubit 0. Le canal ´´drive´´ permet de mettre en oeuvre des opérations de qubits individuels."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:113
msgid "Note that the pulse we defined operates on the ``DriveChannel``, which in turn is initialized with the qubit index. We use ``Schedule.insert`` to play the pulse at timestep ``t = 0``."
msgstr "Notez que l'e pulse que nous avons défini opère sur le ``DriveChannel``, qui à son tour est initialisé avec l'index qubit. Nous utilisons ``Schedule.insert`` pour exécuter l'impulsion au moment ``t = 0``."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:115
msgid "Let’s review what we’ve done, using ``Schedule.draw``:"
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:143
msgid "The ways in which schedules can be composed is covered in detail on `this page <07_building_pulse_schedules.ipynb>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:145
msgid "This pulse will drive qubit 0. It is modulated at qubit 0’s resonant frequency, so it will drive the :math:`|0\\rangle` to :math:`|1\\rangle` transition. It is not calibrated to stop at a particular state, so we won’t know what state we’ve prepared until we look at the results. For our purposes, we don’t mind what state we end up in."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:147
msgid "All that’s left to do is to add a measurement. There is a convenient utility function for adding measurements, but it requires data from the backend system that the program will be running on. We will also need the backend to execute the program."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:150
msgid "Grab a backend"
msgstr "Mettre la main sur un backend (système dorsal)"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:173
msgid "Add measurements"
msgstr "Ajouter des mesures"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:175
msgid "Now we can use this backend to add the measurement instructions for us."
msgstr "Maintenant nous pouvons utiliser ce système dorsal (backend) pour ajouter les instructions de mesure pour nous."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:197
msgid "Let’s see what the convenience function has added for us, using draw again. The acquisition and measurement pulses are very long compared to our initial pulse, so we can use the ``plot_range`` argument to clip the schedule."
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:227
msgid "There is a new pulse on ``MeasureChannel`` ``m0``, a shorthand name for ``MeasureChannel(0)``. This channel stimulates readout on qubit 0. Likewise, ``a0`` is shorthand for ``AcquireChannel(0)``. The ``Acquire`` instruction on ``a0`` tells the measurement devices when to begin collecting data on their analog-to-digital converters (ADC), and for how long. It is drawn as an amplitude 1 constant pulse."
msgstr "Il y a une nouvelle impulsion sur ` ` MeasureChannel ` ` ` ` m0 ` `, un nom abrégé pour ` ` MeasureChannel (0) ` `. Ce canal stimule la lecture sur le qubit 0. De même, ` ` a0 ` ` est le nom abrégé pour ` ` AcquireChannel (0) ` `. L'instruction ` ` Acquire ` ` sur ` ` a0 ` ` indique aux appareils de mesure quand ils doivent commencer à collecter des données sur leurs convertisseurs analogique-vers-numérique (analog-to-digital ou ADC), et pendant combien de temps. Il est tiré comme un pulse constant d'amplitude 1."

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:230
msgid "Execute"
msgstr "Exécution"

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:232
msgid "Our schedule is done! We can’t use our mocked backend to execute programs, but if you have an IBM Quantum account, you could use ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` to see if you have an OpenPulse enabled backend. Once you have such a backend, we can execute it the same way we execute circuits:"
msgstr ""

#: ../../tutorials/circuits_advanced/05_getting_started_with_pulse.ipynb:238
msgid "That’s it! To get the results, use ``result = job.result()``. You’ve created a Pulse program schedule, containing an operation on qubit 0 followed by a measurement, executed the experiment on the backend and retrieved the results. Next, we will cover in detail the `different instructions which can be used in Pulse programs <06_building_pulse_instructions.ipynb>`__."
msgstr ""

